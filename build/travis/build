#! /bin/bash

panic()
{
	echo "FATAL ERROR: $@"
	exit 1
}

in_source_build=0

tmp_dir=/tmp/SPL
source_dir=$(pwd) || panic

if [ "$in_source_build" -ne 0 ]; then

	echo "In-source build"

	(cd "$source_dir" && \
	  cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="$install_dir" \
	  -DALLOW_IN_SOURCE_BUILD=true .) || panic "cmake failed"

	(cd "$source_dir" && make clean && make all) || \
	  panic "make clean/all failed"

	(cd "$source_dir" && make install) || panic "make install failed"

	(cd "$source_dir" && CTEST_OUTPUT_ON_FAILURE=TRUE make test ARGS="-V") || \
	  panic "make test failed"

else

	case "$CXX" in
	*gcc*)
		CXX_COMPILER=gcc;;
	*clang*)
		CXX_COMPILER=clang;;
	*)
		CXX_COMPILER=unknown;;
	esac

	echo "Compiler: $CXX_COMPILER"

	build_dir=/tmp/SPL/build

	echo "Out-of-source build"

	for lib_type in static shared; do

		install_dir="$tmp_dir/$lib_type/install"
		test_dir="$tmp_dir/$lib_type/test"
		if [ "$lib_type" = shared ]; then
			enable_shared=true
		else
			enable_shared=false
		fi

		echo "############################################################"
		echo "############################################################"
		echo "Library type: $lib_type"

		if [ "$TRAVIS_OS_NAME" = "osx" -a "$CXX_COMPILER" = "clang" ]; then
			build_tool="xcode"
		else
			build_tool="make"
		fi

		case "$build_tool" in
		make)
			build_targets=(clean all install)
			cmake_generator="Unix Makefiles"
			build_opts=("VERBOSE=1")
			;;
		xcode)
			build_targets=(clean_all install)
			cmake_generator="Xcode"
			build_opts=()
			;;
		*)
		esac

		echo "########################################"
		echo "cmake"
		echo "build tool: $build_tool"
		echo "########################################"

		cmake_opts=()
		cmake_opts+=(-G "$cmake_generator")
		cmake_opts+=(-DCMAKE_INSTALL_PREFIX="$install_dir")
		cmake_opts+=(-DJAS_ENABLE_SHARED="$enable_shared")
		cmake_opts+=(-H. -B"$build_dir")
		cmake_opts+=("$@")
		echo "Running cmake ${cmake_opts[@]}"
		(cd "$source_dir" && \
		  cmake "${cmake_opts[@]}") || panic "cmake failed"

		case "$build_tool" in
		xcode)
			echo "Running xcodebuild with -list"
			(cd "$build_dir" && xcodebuild -list)
			;;
		esac
		#echo "Running cmake with --target help"
		#cmake --build "$build_dir" --target help

		echo "########################################"
		echo "build"
		echo "########################################"

		for target in "${build_targets[@]}"; do
			echo "########################################"
			echo "make $target"
			echo "########################################"
			cmake_opts=()
			cmake_opts+=(--build "$build_dir")
			if [ "$target" = "clean_all" ]; then
				cmake_opts+=(--clean-first)
			else
				cmake_opts+=(--target "$target")
			fi
			cmake_opts+=(--)
			cmake_opts+=("${build_opts[@]}")
			echo "Running cmake ${cmake_opts[@]}"
			(cmake "${cmake_opts[@]}") || panic "build of $target failed"
			for dir in src/demo src/test src/lib; do
				echo "Listing directory $build_dir/$dir"
				(cd "$build_dir" && ls -alR "$dir")
			done
			for dir in "$install_dir"; do
				if [ -d "$dir" ]; then
					echo "Listing directory $dir"
					(cd "$dir" && ls -alR) || \
					  panic "cannot list directory $dir"
				else
					echo "Directory not found $dir"
				fi
			done
		done

		if [ 1 -ne 0 ]; then
			echo "########################################"
			echo "external test"
			echo "########################################"

			mkdir -p "$test_dir" || panic "cannot make directory $test_dir"
			for file in build/travis/CMakeLists.txt \
			  src/demo/filterDesignDemo.cpp; do
				cp "$source_dir/$file" "$test_dir" || \
				  panic "cannot copy $file"
			done
			cmake_prefix_path="$install_dir"
			cmake_opts=()
			cmake_opts+=(-H"$test_dir" -B"$test_dir")
			cmake_opts+=(-G "Unix Makefiles")
			cmake_opts+=(-DSPL_INCLUDE_DIRS="$install_dir/include")
			cmake_opts+=(-DSPL_LIBRARY_DIRS="$install_dir/lib")
			cmake_opts+=(-DSPL_LIBRARIES="SPL")
			CMAKE_PREFIX_PATH=$cmake_prefix_path \
			  cmake "${cmake_opts[@]}" || panic "cmake failed"
			cmake_opts=()
			cmake_opts+=(--build "$test_dir")
			cmake_opts+=(--clean-first)
			cmake_opts+=(--)
			case "$build_tool" in
			make)
				cmake_opts+=("VERBOSE=1");;
			esac
			CMAKE_PREFIX_PATH=$cmake_prefix_path \
			  cmake "${cmake_opts[@]}" || \
			  panic "build failed"
			#for target in clean all; do
			#	(cd "$test_dir" && make "$target" VERBOSE=1) || \
			#	  panic "make $target failed"
			#done
		fi

		if [ "$lib_type" = shared ]; then
			echo "########################################"
			echo "test"
			echo "########################################"

			#(cd "$build_dir" && \
			#  CTEST_OUTPUT_ON_FAILURE=TRUE make test ARGS="-V") || \
			#  panic "make test failed"

			ctest_opts=()
			#ctest_opts+=(--verbose)
			ctest_opts+=(--extra-verbose)
			ctest_opts+=(--output-on-failure)
			echo "Running ctest ${ctest_opts[@]}"
			(cd "$build_dir" && \
			  ctest "${ctest_opts[@]}") || panic "ctest failed"
		fi

	done

fi
